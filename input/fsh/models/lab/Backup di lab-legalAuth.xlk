// -------------------------------------------------------------------------------				
//  Logical Model				lab-legalAuth.fsh
// -------------------------------------------------------------------------------				
Logical: LegalAuthenticatorLabEhn				
Id: LegalAuthenticator				
Title: ##34#Legal authenticator (A.1.6)##34#				
Description:  ##334#A.1.6 Legal authenticator (The person taking responsibility for the medical content of the document)##334#				
* identifier 0..1 Identifier ##34#A.1.6.1 Legal authenticator identifier##34# ##334#The health professional identification number. Either an internal identifier assigned by a healthcare provider institution or (preferably) a national health professional ID such as the license or registration number.  - Preferred system(s): ##334#				
* name 0..* HumanName ##34#A.1.6.2 Legal authenticator name##34# ##334#Person name. - Preferred system(s): ##334#				
* organization 0..* Organization ##34#A.1.6.3 Legal authenticator organization##34# ##334#The healthcare provider organization information. - Preferred system(s): ##334#		 		
* dateTime 0..1 dateTime ##34#A.1.6.4 Authentication date and time##34# ##334#Date and time when the document was authorized. - Preferred system(s): ISO 8601##334#				
//--- END				
//--- END				
//--- END				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
// -------------------------------------------------------------------------------				
//  Map to FHIR R4				
// -------------------------------------------------------------------------------				
Mapping: eHNLabLegalAuthenticator2Fhir				
Id: fhir				
Title: ##34#eHN Lab LegalAuthenticator model to FHIR R4 Map##34#				
Source: LegalAuthenticator				
Target: ##34#hl7.org/fhir/r4##34#				
				
* -> ##34#Composition.attester.where(mode=http://hl7.org/fhir/composition-attestation-mode#legal)##34#				
* identifier -> ##34#.party.resolve().ofType(PractictionerRole).identifier##34#				
* name -> ##34#.party.resolve().ofType(PractictionerRole).practictioner.resolve().name##34#				
* organization -> ##34#.party.resolve().ofType(PractictionerRole).organization.resolve()##34#				
* organization -> ##34#.party.resolve().ofType(Organization)##34#				
* dateTime -> ##34#.time##34#				
// --END				
// --END				
// --END				
				
